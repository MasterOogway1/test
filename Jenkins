pipeline {
    agent any 
    stages {
        stage('git') { 
            steps {
          sh 'rm -rf /var/lib/jenkins/workspace/hadoop/hadoop'
          sh 'git clone git@github.com:apache/hadoop.git '
          sh 'ls -la '
            }
        
        }
        stage('Deploy') { 
            steps {
                sh 'pwd'
                dir("hadoop") {
                        sh "pwd"
                        sh 'mvn package -Pdist -DskipTests -Dtar -Dmaven.javadoc.skip=true'
                        
                    }
                    
                
                
                
            }
        }
        
    }
}
pipeline {
    agent any
    stages {
        stage('Deploy to OpenShift') {
            steps {
                script {
                    // Команда для деплоя в OpenShift
                    sh 'oc apply -f your-openshift-config.yaml'
                }
            }
        }
        stage('Get Job Name') {
            steps {
                script {
                    // Получаем список Job и берем имя нужного
                    def jobName = sh(script: "oc get job -o jsonpath='{.items[0].metadata.name}'", returnStdout: true).trim()
                    
                    if (jobName) {
                        echo "Job Name: ${jobName}"
                        // Сохраняем имя Job в переменную среды для использования в следующих стадиях
                        env.OPENSHIFT_JOB_NAME = jobName
                    } else {
                        echo "Job не найдено, пропуск следующих стадий."
                        env.OPENSHIFT_JOB_NAME = null
                    }
                }
            }
        }
        stage('Monitor Job Status') {
            when {
                expression { return env.OPENSHIFT_JOB_NAME != null }
            }
            steps {
                script {
                    def jobName = env.OPENSHIFT_JOB_NAME
                    def isJobCompleted = false
                    
                    echo "Мониторинг статуса Job: ${jobName}"
                    // Логика здесь для мониторинга статуса Job
                }
            }
        }
        stage('Cleanup') {
            when {
                expression { return env.OPENSHIFT_JOB_NAME != null }
            }
            steps {
                script {
                    def jobName = env.OPENSHIFT_JOB_NAME
                    echo "Очистка ресурсов для Job: ${jobName}"
                    
                    // Логика очистки ресурсов можно добавить здесь
                }
            }

pipeline {
    agent any
    stages {
        stage('Deploy to OpenShift') {
            steps {
                script {
                    // Пример команды для деплоя в OpenShift
                    sh 'oc apply -f your-openshift-config.yaml'
                }
            }
        }
        stage('Check Job and Containers') {
            steps {
                script {
                    // Получаем имя Job из OpenShift
                    def jobName = ''
                    timeout(time: 3, unit: 'MINUTES') {
                        waitUntil {
                            jobName = sh(script: "oc get job -o jsonpath='{.items[0].metadata.name}'", returnStdout: true).trim()
                            return jobName != ''
                        }
                    }

                    if (jobName) {
                        echo "Job найден: ${jobName}"
                        def terminatedContainers = false
                        
                        for (int i = 0; i < 5; i++) {
                            echo "Проверка статусов контейнеров, попытка ${i + 1}"
                            def containerStatuses = sh(script: "oc get pod -l job-name=${jobName} -o jsonpath='{.items[0].status.containerStatuses[*].state}'", returnStdout: true).trim()
                            echo "Статусы контейнеров: ${containerStatuses}"
                            
                            // Проверка на наличие контейнеров в состоянии terminated
                            if (containerStatuses.contains("terminated")) {
                                terminatedContainers = true
                                break
                            }
                            
                            // Ждем 60 секунд до следующей проверки
                            sleep(time: 60, unit: 'SECONDS')
                        }

                        if (!terminatedContainers) {
                            error("Не найдено ни одного контейнера со статусом 'terminated'. Проверьте статус Job.")
                        }
                    } else {
                        error("Job не найден.")
                    }
                }
            }
        }
    }
}
        }
    }
}
