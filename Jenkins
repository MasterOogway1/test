pipeline {
    agent any 
    stages {
        stage('git') { 
            steps {
          sh 'rm -rf /var/lib/jenkins/workspace/hadoop/hadoop'
          sh 'git clone git@github.com:apache/hadoop.git '
          sh 'ls -la '
            }
        
        }
        stage('Deploy') { 
            steps {
                sh 'pwd'
                dir("hadoop") {
                        sh "pwd"
                        sh 'mvn package -Pdist -DskipTests -Dtar -Dmaven.javadoc.skip=true'
                        
                    }
                    
                
                
                
            }
        }
        
    }
}
pipeline {
    agent any
    stages {
        stage('Deploy to OpenShift') {
            steps {
                script {
                    // Команда для деплоя в OpenShift
                    sh 'oc apply -f your-openshift-config.yaml'
                }
            }
        }
        stage('Get Job Name') {
            steps {
                script {
                    // Получаем список Job и берем имя нужного
                    def jobName = sh(script: "oc get job -o jsonpath='{.items[0].metadata.name}'", returnStdout: true).trim()
                    
                    if (jobName) {
                        echo "Job Name: ${jobName}"
                        // Сохраняем имя Job в переменную среды для использования в следующих стадиях
                        env.OPENSHIFT_JOB_NAME = jobName
                    } else {
                        echo "Job не найдено, пропуск следующих стадий."
                        env.OPENSHIFT_JOB_NAME = null
                    }
                }
            }
        }
        stage('Monitor Job Status') {
            when {
                expression { return env.OPENSHIFT_JOB_NAME != null }
            }
            steps {
                script {
                    def jobName = env.OPENSHIFT_JOB_NAME
                    def isJobCompleted = false
                    
                    echo "Мониторинг статуса Job: ${jobName}"
                    // Логика здесь для мониторинга статуса Job
                }
            }
        }
        stage('Cleanup') {
            when {
                expression { return env.OPENSHIFT_JOB_NAME != null }
            }
            steps {
                script {
                    def jobName = env.OPENSHIFT_JOB_NAME
                    echo "Очистка ресурсов для Job: ${jobName}"
                    
                    // Логика очистки ресурсов можно добавить здесь
                }
            }

pipeline {
    agent any
    stages {
        stage('Deploy to OpenShift') {
            steps {
                script {
                    // Пример команды для деплоя в OpenShift
                    sh 'oc apply -f your-openshift-config.yaml'
                }
            }
        }
        stage('Monitor and Clean Up Job') {
            steps {
                script {
                    // Получаем имя Job из OpenShift
                    def jobName = sh(script: "oc get job -o jsonpath='{.items[0].metadata.name}'", returnStdout: true).trim()
                    if (!jobName) {
                        error "Job не найден!"
                    }
                    echo "Job найден: ${jobName}"

                    // Переменная для хранения статуса
                    def isTerminated = false
                    def retryCount = 5

                    // Проверка статусов контейнеров
                    for (int i = 0; i < retryCount; i++) {
                        def podList = sh(script: "oc get pods --selector=job-name=${jobName} -o jsonpath='{.items[*].metadata.name}'", returnStdout: true).trim().split()

                        for (podName in podList) {
                            def terminatedState = sh(script: """
                                oc get pod ${podName} -o jsonpath='{.status.containerStatuses[*].state.terminated}'
                            """, returnStdout: true).trim()

                            if (terminatedState) {
                                echo "Найден контейнер в состоянии Terminated в Pod: ${podName}"
                                isTerminated = true
                                break
                            }
                        }

                        if (isTerminated) {
                            break
                        }
                        // Ожидание перед следующей попыткой проверки
                        sleep(20)
                    }

                    // Удаляем Job, если обнаружен Terminated контейнер
                    if (isTerminated) {
                        echo "Удаление Job: ${jobName} из-за Terminated контейнера"
                        sh "oc delete job ${jobName}"
                    } else {
                        echo "Контейнеры не достигли состояния Terminated!"
                    }
                }
            }
        }
    }
}
pipeline {
    agent any
    stages {
        stage('Deploy to OpenShift') {
            steps {
                script {
                    // Пример команды для деплоя в OpenShift
                    sh 'oc apply -f your-openshift-config.yaml'
                }
            }
        }
        stage('Check Job and Containers') {
            steps {
                script {
                    // Пытаемся получить имя Job из OpenShift
                    def jobName = ''
                    timeout(time: 3, unit: 'MINUTES') {
                        waitUntil {
                            jobName = sh(script: "oc get job -o jsonpath='{.items[0].metadata.name}' || echo ''", returnStdout: true).trim()
                            return true // всегда продолжаем, чтобы выйти по таймауту, если jobName пусто
                        }
                    }

                    if (jobName) {
                        echo "Job найден: ${jobName}"
                        def terminatedContainers = false
                        
                        for (int i = 0; i < 5; i++) {
                            def containerStatus = sh(script: "oc get pod -l job-name=${jobName} -o jsonpath='{.items[0].status.containerStatuses[0].state.terminated.reason}' || echo ''", returnStdout: true).trim()
                            if (containerStatus) {
                                terminatedContainers = true
                                break
                            }
                            sleep 10
                        }
                        
                        if (terminatedContainers) {
                            echo "Контейнер завершен. Удаление Job: ${jobName}"
                            sh "oc delete job ${jobName}"
                        } else {
                            echo "Контейнеры не завершены."
                        }
                    } else {
                        echo "Job не найден."
                    }
                }
            }
        }
    }
}

pipeline {
    agent any
    stages {
        stage('Deploy to OpenShift') {
            steps {
                script {
                    // Пример команды для деплоя в OpenShift
                    sh 'oc apply -f your-openshift-config.yaml'
                }
            }
        }
        stage('Monitor and Clean Up Job') {
            steps {
                script {
                    // Проверяем наличие активных Job в OpenShift
                    def jobList = sh(script: "oc get job --field-selector=status.active=1 -o jsonpath='{.items[*].metadata.name}'", returnStdout: true).trim()
                    
                    if (!jobList) {
                        echo "Активных Job нет!"
                    } else {
                        echo "Найдены активные Jobs: ${jobList}"
                        
                        // Переменная для хранения статуса
                        def isTerminated = false
                        def retryCount = 5

                        // Проверка статусов контейнеров
                        for (int i = 0; i < retryCount; i++) {
                            def podList = sh(script: "oc get pods --selector=job-name=${jobList} -o json", returnStdout: true)
                            def pods = readJSON(text: podList).items

                            pods.each { pod ->
                                def containerStatuses = pod.status.containerStatuses
                                containerStatuses.each { containerStatus ->
                                    if (containerStatus.state.terminated != null) {
                                        isTerminated = true
                                    }
                                }
                            }

                            if (isTerminated) {
                                echo "Один из контейнеров достиг состояния Terminated. Удаление Job."
                                sh "oc delete job ${jobList}"
                                break
                            } else {
                                echo "Контейнеры все еще работают. Повторная проверка через 30 секунд."
                                sleep(time: 30, unit: 'SECONDS')
                            }
                        }
                    }
                }
            }
        }
    }
}


pipeline {
    agent any
    stages {
        stage('Deploy to OpenShift') {
            steps {
                script {
                    // Пример команды для деплоя в OpenShift
                    sh 'oc apply -f your-openshift-config.yaml'
                }
            }
        }
        stage('Monitor and Clean Up Job') {
            steps {
                script {
                    // Получаем список активных Job в OpenShift через grep
                    def jobListCommand = """
                        oc get jobs --no-headers | awk '$3 > 0 {print $1}'
                    """
                    def jobList = sh(script: jobListCommand, returnStdout: true).trim().split()

                    if (jobList.empty) {
                        echo "Активных Job нет!"
                    } else {
                        echo "Найдены активные Jobs: ${jobList.join(', ')}"
                        
                        // Переменная для хранения статуса
                        def isTerminated = false
                        def retryCount = 5

                        // Проверка статусов контейнеров
                        for (int i = 0; i < retryCount; i++) {
                            isTerminated = true // Предположим, что все Job завершены

                            for (job in jobList) {
                                def statusCommand = """
                                    oc get job ${job} -o jsonpath='{.status.succeeded}'
                                """
                                def status = sh(script: statusCommand, returnStdout: true).trim()

                                if (status == '') {
                                    isTerminated = false
                                    echo "Job ${job} все еще активен или завершился с ошибкой."
                                }
                            }

                            if (isTerminated) {
                                echo "Все Jobs завершены."
                                break
                            } else {
                                echo "Ожидание завершения Jobs..."
                                sleep 60
                            }
                        }

                        if (!isTerminated) {
                            error "Некоторые Jobs не завершились успешно."
                        }
                    }
                }
            }
        }
    }
}


-----------------------



pipeline {
    agent any
    stages {
        stage('Deploy to OpenShift') {
            steps {
                script {
                    // Пример команды для деплоя в OpenShift
                    sh 'oc apply -f your-openshift-config.yaml'
                }
            }
        }
        stage('Monitor and Clean Up Job') {
            steps {
                script {
                    // Получаем список активных Job в OpenShift
                    def jobListCommand = """
                        oc get jobs --no-headers | awk '$3 > 0 {print $1}'
                    """
                    def jobList = sh(script: jobListCommand, returnStdout: true).trim().split()

                    if (jobList.empty) {
                        echo "Активных Job нет!"
                    } else {
                        echo "Найдены активные Jobs: ${jobList.join(', ')}"

                        // Переменная для хранения статуса
                        def isTerminated = false
                        def retryCount = 5

                        // Проверка статусов контейнеров
                        for (int i = 0; i < retryCount; i++) {
                            jobList.each { jobName ->
                                def podList = sh(script: "oc get pods --selector=job-name=${jobName} -o json", returnStdout: true)
                                def pods = readJSON(text: podList).items

                                pods.each { pod ->
                                    def containerStatuses = pod.status.containerStatuses
                                    containerStatuses.each { containerStatus ->
                                        if (containerStatus.state.terminated != null) {
                                            isTerminated = true
                                        }
                                    }
                                }

                                if (isTerminated) {
                                    echo "Один из контейнеров для Job ${jobName} достиг состояния Terminated. Удаление Job."
                                    sh "oc delete job ${jobName}"
                                    break
                                }
                            }

                            if (!isTerminated) {
                                echo "Контейнеры все еще работают. Повторная проверка через 30 секунд."
                                sleep(time: 30, unit: 'SECONDS')
                            } else {
                                break
                            }
                        }
                    }
                }
            }
        }
    }
}


def jobListCommand = "oc get jobs --no-headers | awk '{\$3 > 0 {print \$1}}'"



def jobListCommand = "oc get jobs --no-headers | awk '{print \$3 > 0 ? \$1 : \"\"}'"



sh '''
    oc get jobs --no-headers | awk '$3 > 0 {print $1}'
'''
pipeline {
    agent any
    stages {
        stage('Deploy to OpenShift') {
            steps {
                script {
                    // Пример команды для деплоя в OpenShift
                    sh 'oc apply -f your-openshift-config.yaml'
                }
            }
        }
        stage('Monitor and Clean Up Job') {
            steps {
                script {
                    // Проверка наличия активных Job
                    def jobCount = sh(script: "oc get jobs --no-headers | wc -l", returnStdout: true).trim().toInteger()

                    if (jobCount == 0) {
                        echo "Активных Job нет. Пропустить фазу."
                    } else {
                        // Получаем список Job с не нулевым количеством завершённых подов
                        def jobListCommand = """
                            oc get jobs --no-headers | awk '$3 > 0 {print $1}'
                        """
                        def jobList = sh(script: jobListCommand, returnStdout: true).trim().split()

                        echo "Найдены активные Jobs: ${jobList.join(', ')}"

                        // Переменная для хранения статуса
                        def isTerminated = false
                        def retryCount = 5

                        // Проверка статусов контейнеров
                        for (int i = 0; i < retryCount; i++) {
                            jobList.each { jobName ->
                                def podList = sh(script: "oc get pods --selector=job-name=${jobName} -o json", returnStdout: true)
                                def pods = readJSON(text: podList).items

                                pods.each { pod ->
                                    def containerStatuses = pod.status.containerStatuses
                                    containerStatuses.each { containerStatus ->
                                        if (containerStatus.state.terminated != null) {
                                            isTerminated = true
                                        }
                                    }
                                }

                                if (isTerminated) {
                                    echo "Один из контейнеров для Job ${jobName} достиг состояния Terminated. Удаление Job."
                                    sh "oc delete job ${jobName}"
                                    break
                                }
                            }

                            if (!isTerminated) {
                                echo "Контейнеры все еще работают. Повторная проверка через 30 секунд."
                                sleep(time: 30, unit: 'SECONDS')
                            } else {
                                break
                            }
                        }
                    }
                }
            }
        }
    }
}



pipeline {
    agent any

    stages {
        stage('Clone Repository') {
            steps {
                git 'https://your-repo-url.git'
            }
        }
        stage('Build with Maven') {
            steps {
                sh 'mvn clean install'
            }
        }
        stage('Build Docker Image') {
            steps {
                sh 'docker build -t my-app:latest .'
            }
        }
        stage('Push to Docker Registry') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-credentials', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                        sh 'docker push my-app:latest'
                    }
                }
            }
        }
    }
}
