pipeline {
    agent any

    environment {
        NEXUS_URL = 'http://your-nexus-url/repository/your-repo'
        ARTIFACT_NAME = 'your-artifact-name.tar.gz'
        REMOTE_SERVER = 'your.remote.server'
        REMOTE_USER = 'your-user'
        SERVICE_NAME = 'your-service-name'
    }

    stages {
        stage('Download from Nexus') {
            steps {
                script {
                    sh "curl -u <nexus-username>:<nexus-password> -O ${NEXUS_URL}/${ARTIFACT_NAME}"
                }
            }
        }
        
        stage('Transfer to Server') {
            steps {
                script {
                    // Ansible playbook должно быть предварительно написано и проверено
                    sh "ansible-playbook -i ${REMOTE_SERVER}, transfer-artifact.yml --extra-vars 'artifact_name=${ARTIFACT_NAME}'"
                }
            }
        }

        stage('Start Service') {
            steps {
                script {
                    // Ansible playbook для запуска сервиса
                    sh "ansible-playbook -i ${REMOTE_SERVER}, start-service.yml --extra-vars 'service_name=${SERVICE_NAME}'"
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
---
- name: Transfer artifact to remote server
  hosts: all
  vars:
    ansible_user: '{{ lookup("env", "REMOTE_USER") }}'
    destination: '/path/to/target/directory'
  tasks:
    - name: Copy artifact
      copy:
        src: '{{ artifact_name }}'
        dest: '{{ destination }}/{{ artifact_name }}'

pipeline {
    agent any

    environment {
        NEXUS_URL = 'http://nexus.example.com/repository/path/to/distribution.tar.gz'
        NEXUS_CREDENTIALS = credentials('nexus-credentials-id') // Убедитесь, что креды настроены в Jenkins
        ARCHIVE_NAME = 'distribution.tar.gz'
        INSTALL_DIR = '/RRM'
        ANSIBLE_PLAYBOOK = 'deploy.yml'
        ANSIBLE_INVENTORY = 'path/to/inventory' // Укажите путь к вашему Ansible инвентарю
    }

    stages {
        stage('Download from Nexus') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${NEXUS_CREDENTIALS}", usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                        sh """
                        curl -u $NEXUS_USER:$NEXUS_PASS -o ${ARCHIVE_NAME} ${NEXUS_URL}
                        """
                    }
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                script {
                    sh """
                    ansible-playbook -i ${ANSIBLE_INVENTORY} ${ANSIBLE_PLAYBOOK} --extra-vars "archive_name=${ARCHIVE_NAME} install_dir=${INSTALL_DIR}"
                    """
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}


stage('List Archives') {
        def files = sh(script: 'ls /path/to/archives/*.tar.gz', returnStdout: true).trim().split('\n')
        echo "Found archives: ${files.join(', ')}"
        
        // В дальнейшем используйте эти названия в вашем pipeline как вам нужно
        // Например:
        env.VM_ARCHIVE = files.find { it.contains('victoria') }
        env.VMUTILS_ARCHIVE = files.find { it.contains('vmutils') }
    }
    
    stage('Deploy') {
        sh "ansible-playbook your_playbook.yml -e vm_archive=${env.VM_ARCHIVE} -e vmutils_archive=${env.VMUTILS_ARCHIVE}"
    }




---
- name: Deploy archives
  hosts: your_target_hosts
  become: true
  vars:
    install_dir: /RRM
    vm_archive: "{{ vm_archive }}"
    vmutils_archive: "{{ vmutils_archive }}"
  tasks:
    - name: Copy Victoria Metrics archive to remote server
      ansible.builtin.copy:
        src: "/path/to/{{ vm_archive }}"
        dest: "{{ install_dir }}/{{ vm_archive }}"
        mode: '0644'

    - name: Copy VMUtils archive to remote server
      ansible.builtin.copy:
        src: "/path/to/{{ vmutils_archive }}"
        dest: "{{ install_dir }}/{{ vmutils_archive }}"
        mode: '0644'

    - name: Unpack Victoria Metrics archive
      ansible.builtin.unarchive:
        src: "{{ install_dir }}/{{ vm_archive }}"
        dest: "{{ install_dir }}"
        remote_src: yes

    - name: Unpack VMUtils archive
      ansible.builtin.unarchive:
        src: "{{ install_dir }}/{{ vmutils_archive }}"
        dest: "{{ install_dir }}"
        remote_src: yes



 withCredentials([usernamePassword(credentialsId: 'my-credential-id', passwordVariable: 'ANSIBLE_PASSWORD', usernameVariable: 'ANSIBLE_USER')]) {
                           sh '''
                               ansible-playbook -i inventory.ini playbook.yml \
                               --extra-vars "ansible_user=${ANSIBLE_USER} ansible_ssh_pass=${ANSIBLE_PASSWORD}"
                           '''
                       }


 ansiblePlaybook(
                        playbook: 'deploy.yml',
                        inventory: ANSIBLE_INVENTORY,
                        extraVars: [
                            INSTALL_DIR: "${INSTALL_DIR}"
                        ]
                    )



---
- name: Ensure installation directory exists
  file:
    path: "{{ install_dir }}"
    state: directory

- name: Copy Victoria Metrics archive to remote server
  ansible.builtin.copy:
    src: "/path/to/{{ vm_archive }}"
    dest: "{{ install_dir }}/{{ vm_archive }}"
    mode: '0644'

- name: Copy VMUtils archive to remote server
  ansible.builtin.copy:
    src: "/path/to/{{ vmutils_archive }}"
    dest: "{{ install_dir }}/{{ vmutils_archive }}"
    mode: '0644'

- name: Unpack Victoria Metrics archive
  ansible.builtin.unarchive:
    src: "{{ install_dir }}/{{ vm_archive }}"
    dest: "{{ install_dir }}"
    remote_src: yes

- name: Unpack VMUtils archive
  ansible.builtin.unarchive:
    src: "{{ install_dir }}/{{ vmutils_archive }}"
    dest: "{{ install_dir }}"
    remote_src: yes



   // Поиск RPM-файла с именем grafana
    def grafanaFiles = sh(script: 'ls /path/to/archives/*.rpm', returnStdout: true).trim().split('\n')
    echo "Found RPMs: ${grafanaFiles.join(', ')}"
    
    // Установка переменной окружения для rpm Grafana, если он найден
    if (env.ROLE_INSTALL_GRAFANA && grafanaFiles) {
        env.GRAFANA_RPM = grafanaFiles.find { it.contains('grafana') }
        echo "Grafana RPM found: ${env.GRAFANA_RPM}"
    } else {
        echo "Grafana RPM not found or role is not specified."
    }

    - name: Install Grafana RPM package
      yum:
        name: "/opt/packages/grafana.rpm"
        state: present

    - name: Clean up temporary files
      file:
        path: "/tmp/grafana.rpm"
        state: absent
                   def ansibleVars

                    if (params.roles == 'install_grafana') {
                        ansibleVars = "grafana_rpm=${GRAFANA_RPM}"
                    } else {
                        ansibleVars = "vm_archive=${VM_ARCHIVE} vmutils_archive=${VMUTILS_ARCHIVE}"
                    }

                    // Запускаем playbook с передачей переменных
                    sh """
                        ansible-playbook /path/to/playbook.yml --extra-vars "${ansibleVars}"
                    """
                }
def extraVarsJson = readJSON text: "{${ansibleVars.split(' ').collect { "\"${it.split('=')[0]}\":\"${it.split('=')[1]}\"" }.join(',')}}"
